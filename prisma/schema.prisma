// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  password          String?
  image             String?             // Profile picture
  coverPhoto        String?             // Cover photo
  role              UserRole            @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  emailVerified     Boolean             @default(false)
  phoneVerified     Boolean             @default(false)
  identityVerified  Boolean             @default(false)
  location          String?
  bio               String?
  phone             String?
  rating            Float?
  reviewCount       Int                 @default(0)
  
  // Relations
  properties        Property[]          @relation("UserProperties")
  auctionWins       Property[]          @relation("AuctionWinner")
  savedProperties   SavedProperty[]
  transactions      Transaction[]       @relation("UserTransactions")
  transactionParty  TransactionParty[]
  reviews           Review[]            @relation("UserReviews")
  reviewsReceived   Review[]            @relation("ReceivedReviews")
  services          Service[]
  projects          Project[]
  appointments      Appointment[]
  appointmentParticipants AppointmentParticipant[]
  calendarIntegrations CalendarIntegration[]
  messages          Message[]           @relation("SentMessages")
  receivedMessages  Message[]           @relation("ReceivedMessages")
  subscription      Subscription?
  serviceOrders     ServiceOrder[]      @relation("ClientOrders")
  providedOrders    ServiceOrder[]      @relation("ProviderOrders")
  fees              Fee[]
  serviceRequests   ServiceRequest[]    @relation("ServiceRequestClient")
  serviceResponses  ServiceRequest[]    @relation("ServiceRequestProvider")
  responsesSent     ServiceResponse[]   @relation("ServiceResponseProvider")
  advertisements    Advertisement[]
  adPurchases       AdPurchase[]
  bids              Bid[]               // Bids placed by this user
  auctionWatchList  AuctionWatchList[]  // Auctions this user is watching
  deliverables      ProjectDeliverable[] // Deliverables uploaded by this user
  teamMemberships   ProjectTeamMember[]  // Projects where this user is a team member
}

enum UserRole {
  USER
  PROFESSIONAL
  ADMIN
}

// Property model
model Property {
  id              String            @id @default(cuid())
  title           String
  description     String?           @db.Text
  address         String
  city            String
  state           String
  zipCode         String
  price           Float
  beds            Int?
  baths           Float?
  sqft            Int?
  type            PropertyType
  status          PropertyStatus    @default(FOR_SALE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  images          PropertyImage[]
  features        String[]
  latitude        Float?
  longitude       Float?

  // Auction-specific fields
  auctionEndDate  DateTime?         // When auction ends
  minimumBid      Float?            // Starting/minimum bid amount
  currentBid      Float?            // Current highest bid
  bidIncrement    Float?            // Minimum bid increment (default: 1000)
  reservePrice    Float?            // Reserve price (optional)
  auctionWinnerId String?           // Winner of the auction
  auctionWinner   User?             @relation("AuctionWinner", fields: [auctionWinnerId], references: [id])

  // Relations
  ownerId         String
  owner           User              @relation("UserProperties", fields: [ownerId], references: [id])
  savedBy         SavedProperty[]
  transactions    Transaction[]
  appointments    Appointment[]
  bids            Bid[]             // Bids placed on this property
  watchedBy       AuctionWatchList[] // Users watching this auction
  analytics       AuctionAnalytics?  // Analytics for this auction
  extensions      AuctionExtension[] // Extension history for this auction
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
  MULTI_FAMILY
}

enum PropertyStatus {
  FOR_SALE
  AUCTION
  PENDING
  SOLD
}

model PropertyImage {
  id          String    @id @default(cuid())
  url         String
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model SavedProperty {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([userId, propertyId])
}

// Bid model for auction functionality
model Bid {
  id          String      @id @default(cuid())
  amount      Float       // Bid amount
  propertyId  String
  property    Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  bidderId    String
  bidder      User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  status      BidStatus   @default(ACTIVE)
  isWinning   Boolean     @default(false)  // Whether this is currently the winning bid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  triggeredExtensions AuctionExtension[] // Extensions triggered by this bid

  @@index([propertyId, amount])
  @@index([propertyId, createdAt])
}

// Auction watch list for users to track auctions without bidding
model AuctionWatchList {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

// Auction analytics for tracking auction performance
model AuctionAnalytics {
  id                String   @id @default(cuid())
  propertyId        String   @unique
  property          Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  totalBids         Int      @default(0)
  uniqueBidders     Int      @default(0)
  highestBid        Float?
  averageBid        Float?
  viewCount         Int      @default(0)
  watchListCount    Int      @default(0)
  reservePriceMet   Boolean  @default(false)
  extensionCount    Int      @default(0)  // Number of times auction was extended
  finalSalePrice    Float?   // Final sale price if auction completed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([propertyId])
}

// Auction extension logs to track when auctions are extended
model AuctionExtension {
  id               String   @id @default(cuid())
  propertyId       String
  property         Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  originalEndDate  DateTime // Original end date
  newEndDate       DateTime // New end date after extension
  triggerBidId     String?  // Bid that triggered the extension
  triggerBid       Bid?     @relation(fields: [triggerBidId], references: [id], onDelete: SetNull)
  extensionMinutes Int      @default(10) // How many minutes the auction was extended
  createdAt        DateTime @default(now())

  @@index([propertyId])
  @@index([originalEndDate])
}

enum BidStatus {
  ACTIVE      // Bid is active and valid
  OUTBID      // Bid has been outbid by a higher bid
  WITHDRAWN   // Bid was withdrawn by the bidder
  WINNING     // Bid won the auction
  EXPIRED     // Auction ended without this bid winning
}

// Transaction model
model Transaction {
  id                String              @id @default(cuid())
  propertyId        String
  property          Property            @relation(fields: [propertyId], references: [id])
  creatorId         String
  creator           User                @relation("UserTransactions", fields: [creatorId], references: [id])
  type              TransactionType
  status            TransactionStatus   @default(IN_PROGRESS)
  price             Float
  closingDate       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  progress          Int                 @default(0)
  notes             String?             @db.Text
  
  // Relations
  parties           TransactionParty[]
  documents         Document[]
  titleCompanyId    String?
  titleCompany      TitleCompany?       @relation(fields: [titleCompanyId], references: [id])
  milestones        Milestone[]
  appointments      Appointment[]
}

enum TransactionType {
  PURCHASE
  SALE
}

enum TransactionStatus {
  IN_PROGRESS
  PENDING_APPROVAL
  DOCUMENT_REVIEW
  CLOSING_SOON
  COMPLETED
  CANCELLED
}

model TransactionParty {
  id              String        @id @default(cuid())
  transactionId   String
  transaction     Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  role            PartyRole
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([transactionId, userId, role])
}

enum PartyRole {
  BUYER
  SELLER
  AGENT
  TITLE_AGENT
  ATTORNEY
  OTHER
}

model Document {
  id              String        @id @default(cuid())
  name            String
  url             String
  type            DocumentType
  transactionId   String
  transaction     Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  uploadedById    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum DocumentType {
  PURCHASE_AGREEMENT
  DISCLOSURE
  INSPECTION
  APPRAISAL
  TITLE_COMMITMENT
  CLOSING_STATEMENT
  OTHER
}

model Milestone {
  id              String        @id @default(cuid())
  transactionId   String
  transaction     Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  dueDate         DateTime
  completedDate   DateTime?
  status          MilestoneStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

// Title Company model
model TitleCompany {
  id              String        @id @default(cuid())
  name            String
  address         String?
  city            String?
  state           String?
  zipCode         String?
  phone           String?
  email           String?
  website         String?
  logo            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  transactions    Transaction[]
}

// Service model
model Service {
  id              String        @id @default(cuid())
  name            String
  description     String?       @db.Text
  category        ServiceCategory
  price           String?
  hourlyRate      Float?
  providerId      String
  provider        User          @relation(fields: [providerId], references: [id])
  location        String?
  image           String?
  verified        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  reviews         Review[]
  projects        Project[]
  orders          ServiceOrder[]
  advertisements  Advertisement[]
  appointments    Appointment[]
}

enum ServiceCategory {
  TITLE_SERVICES
  HOME_INSPECTION
  PHOTOGRAPHY
  CONTRACTORS
  LEGAL_SERVICES
  MORTGAGE
  INTERIOR_DESIGN
  MOVING_SERVICES
}

// Project model
model Project {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  status          ProjectStatus @default(IN_PROGRESS)
  progress        Int           @default(0)
  startDate       DateTime?
  endDate         DateTime?
  budget          Float?
  ownerId         String
  owner           User          @relation(fields: [ownerId], references: [id])
  serviceId       String?
  service         Service?      @relation(fields: [serviceId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  milestones      ProjectMilestone[]
  deliverables    ProjectDeliverable[]
  teamMembers     ProjectTeamMember[]
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Project Milestone model
model ProjectMilestone {
  id              String            @id @default(cuid())
  title           String
  description     String?           @db.Text
  status          MilestoneStatus   @default(PENDING)
  dueDate         DateTime?
  completedDate   DateTime?
  projectId       String
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}



// Project Deliverable model
model ProjectDeliverable {
  id              String              @id @default(cuid())
  title           String
  description     String?             @db.Text
  type            DeliverableType
  status          DeliverableStatus   @default(DRAFT)
  fileUrl         String?
  fileName        String?
  fileSize        String?
  uploadedById    String?
  uploadedBy      User?               @relation(fields: [uploadedById], references: [id])
  projectId       String
  project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

enum DeliverableType {
  DOCUMENT
  IMAGE
  VIDEO
  REPORT
  PLAN
  OTHER
}

enum DeliverableStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  FINAL
}

// Project Team Member model
model ProjectTeamMember {
  id              String        @id @default(cuid())
  name            String
  role            String
  email           String?
  phone           String?
  userId          String?       // Optional link to actual user
  user            User?         @relation(fields: [userId], references: [id])
  projectId       String
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Review model
model Review {
  id              String        @id @default(cuid())
  rating          Float
  comment         String?       @db.Text
  authorId        String
  author          User          @relation("UserReviews", fields: [authorId], references: [id])
  receiverId      String
  receiver        User          @relation("ReceivedReviews", fields: [receiverId], references: [id])
  serviceId       String?
  service         Service?      @relation(fields: [serviceId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Calendar/Appointment model
model Appointment {
  id              String        @id @default(cuid())
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  location        String?
  type            AppointmentType
  userId          String
  user            User          @relation(fields: [userId], references: [id])

  // Source tracking
  source          AppointmentSource @default(MANUAL)
  sourceId        String?       // ID of the related entity (service, property, transaction, etc.)

  // Related entities
  serviceId       String?
  service         Service?      @relation(fields: [serviceId], references: [id])
  propertyId      String?
  property        Property?     @relation(fields: [propertyId], references: [id])
  transactionId   String?
  transaction     Transaction?  @relation(fields: [transactionId], references: [id])

  // Participants (for multi-party appointments)
  participants    AppointmentParticipant[]

  // External calendar sync
  externalId      String?       // For calendar sync
  externalData    String?       // JSON data from external calendar
  synced          Boolean       @default(false)

  // Status and metadata
  status          AppointmentStatus @default(SCHEDULED)
  isRecurring     Boolean       @default(false)
  recurringData   String?       // JSON data for recurring appointments

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum AppointmentType {
  CLOSING
  INSPECTION
  PHOTOGRAPHY
  LEGAL
  RENOVATION
  SERVICE_CONSULTATION
  PROPERTY_VIEWING
  PROPERTY_TOUR
  MEETING
  CALL
  OTHER
}

enum AppointmentSource {
  MANUAL          // Created manually in calendar
  SERVICE_BOOKING // Created from service booking
  PROPERTY_VIEWING // Created from property viewing request
  PROGRESS_MILESTONE // Created from transaction milestone
  MESSAGE_SCHEDULING // Created from message conversation
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

// Appointment participants for multi-party meetings
model AppointmentParticipant {
  id            String      @id @default(cuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  role          ParticipantRole @default(ATTENDEE)
  status        ParticipantStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([appointmentId, userId])
}

enum ParticipantRole {
  ORGANIZER
  ATTENDEE
  OPTIONAL
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

// Calendar Integration model
model CalendarIntegration {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  provider        CalendarProvider
  accessToken     String
  refreshToken    String?
  expiresAt       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, provider])
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
}

// Messaging model
model Message {
  id              String        @id @default(cuid())
  content         String        @db.Text
  senderId        String
  sender          User          @relation("SentMessages", fields: [senderId], references: [id])
  receiverId      String
  receiver        User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  read            Boolean       @default(false)
  createdAt       DateTime      @default(now())
  conversationId  String
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id              String        @id @default(cuid())
  messages        Message[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Subscription models
model Subscription {
  id              String              @id @default(cuid())
  userId          String              @unique
  user            User                @relation(fields: [userId], references: [id])
  tier            SubscriptionTier
  status          SubscriptionStatus  @default(ACTIVE)
  stripeCustomerId String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime
  currentPeriodEnd DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Usage tracking
  listingsUsed    Int                 @default(0)
  listingsLimit   Int?                // null for unlimited
  transactionFeesPaid Float           @default(0)
}

enum SubscriptionTier {
  FREE
  PROFESSIONAL_MONTHLY
  PAY_PER_LISTING
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

// Service Order model for tracking service purchases
model ServiceOrder {
  id              String              @id @default(cuid())
  serviceId       String
  service         Service             @relation(fields: [serviceId], references: [id])
  clientId        String
  client          User                @relation("ClientOrders", fields: [clientId], references: [id])
  providerId      String
  provider        User                @relation("ProviderOrders", fields: [providerId], references: [id])
  amount          Float
  status          ServiceOrderStatus  @default(PENDING)
  description     String?             @db.Text
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  fees            Fee[]
}

enum ServiceOrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Fee model for tracking various fees
model Fee {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  type            FeeType
  amount          Float
  description     String?
  status          FeeStatus     @default(PENDING)
  serviceOrderId  String?
  serviceOrder    ServiceOrder? @relation(fields: [serviceOrderId], references: [id])
  stripePaymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum FeeType {
  LISTING_FEE
  TRANSACTION_FEE
  SUBSCRIPTION_FEE
  SERVICE_FEE
}

enum FeeStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Service Request model for professionals to see service needs
model ServiceRequest {
  id              String              @id @default(cuid())
  title           String
  description     String              @db.Text
  category        ServiceCategory
  budget          String?
  location        String
  urgency         ServiceUrgency      @default(NORMAL)
  status          ServiceRequestStatus @default(OPEN)
  clientId        String
  client          User                @relation("ServiceRequestClient", fields: [clientId], references: [id])
  providerId      String?
  provider        User?               @relation("ServiceRequestProvider", fields: [providerId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  responses       ServiceResponse[]
}

enum ServiceUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ServiceRequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Service Response model for professionals to respond to requests
model ServiceResponse {
  id              String        @id @default(cuid())
  serviceRequestId String
  serviceRequest  ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  providerId      String
  provider        User          @relation("ServiceResponseProvider", fields: [providerId], references: [id])
  message         String        @db.Text
  proposedPrice   Float?
  estimatedDuration String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Advertisement models
model Advertisement {
  id              String              @id @default(cuid())
  title           String
  description     String?             @db.Text
  imageUrl        String?
  linkUrl         String?
  advertiserId    String
  advertiser      User                @relation(fields: [advertiserId], references: [id])
  serviceId       String?
  service         Service?            @relation(fields: [serviceId], references: [id])
  status          AdStatus            @default(PENDING)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  purchases       AdPurchase[]
  placements      AdPlacement[]
  analytics       AdAnalytics[]
}

enum AdStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  PAUSED
  EXPIRED
}

model AdPurchase {
  id              String              @id @default(cuid())
  advertisementId String
  advertisement   Advertisement       @relation(fields: [advertisementId], references: [id])
  purchaserId     String
  purchaser       User                @relation(fields: [purchaserId], references: [id])
  adSlots         AdSlot[]
  totalCost       Float
  duration        Int                 // in hours
  startDate       DateTime
  endDate         DateTime
  status          AdPurchaseStatus    @default(PENDING)
  stripePaymentIntentId String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

enum AdPurchaseStatus {
  PENDING
  PAID
  ACTIVE
  COMPLETED
  CANCELLED
}

model AdSlot {
  id              String              @id @default(cuid())
  adPurchaseId    String
  adPurchase      AdPurchase          @relation(fields: [adPurchaseId], references: [id])
  placement       AdPlacement         @relation(fields: [placementId], references: [id])
  placementId     String
  startTime       DateTime
  endTime         DateTime
  isActive        Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model AdPlacement {
  id              String              @id @default(cuid())
  advertisementId String
  advertisement   Advertisement       @relation(fields: [advertisementId], references: [id])
  location        AdLocation
  position        Int                 @default(0) // 0-4 for the 5 spots
  priority        Int                 @default(0) // Higher priority shows first
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  slots           AdSlot[]
}

enum AdLocation {
  BOTTOM_GLOBAL   // Bottom of all pages
  FRONTPAGE       // Front page specific
  SERVICES        // Services section
  MARKETPLACE     // Marketplace section
  SIDEBAR         // Sidebar ads (future)
}

model AdAnalytics {
  id              String              @id @default(cuid())
  advertisementId String
  advertisement   Advertisement       @relation(fields: [advertisementId], references: [id])
  date            DateTime            @default(now())
  impressions     Int                 @default(0)
  clicks          Int                 @default(0)
  conversions     Int                 @default(0)
  cost            Float               @default(0)
  location        AdLocation
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([advertisementId, date, location])
}

// Job Marketplace models
model JobListing {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  location        String
  budget          String
  category        ServiceCategory
  skills          String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  proposals       Int           @default(0)
}
